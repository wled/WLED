<!DOCTYPE html>
<html lang="en">
<head>
	<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport">
	<meta charset="utf-8">
	<title>Time Settings</title>
	<script src="common.js" async type="text/javascript"></script>
	<script>
	var el=false;
	var ms=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
	var maxTimePresets = 16; // Maximum number of time-controlled presets
	var currentPresetCount = 3; // Current number of presets (sunrise + sunset + 1 permanent time preset)
	function S() {
		getLoc();
		loadJS(getURL('/settings/s.js?p=5'), false, ()=>{BTa();}, ()=>{
			updLatLon();
			Cs();
			FC();
		});	// If we set async false, file is loaded and executed, then next statement is processed
		if (loc) d.Sf.action = getURL('/settings/time');
	}
	function expand(o,i)
	{
		var t = gId("WD"+i);
		t.style.display = t.style.display!=="none" ? "none" : "";
		o.innerHTML = t.style.display==="none" ? "&#128197;" : "&#x2715;";
	}
	function Cs() { gId("cac").style.display=(gN("OL").checked)?"block":"none"; }
	function BTa()
	{
		var ih="<thead><tr><th>En.</th><th>Hour</th><th>Minute</th><th>Preset</th><th></th></tr></thead>";
		// Generate sunrise preset (0)
		ih += generatePresetRow(0, true, "Sunrise");
		// Generate sunset preset (1)
		ih += generatePresetRow(1, true, "Sunset");
		// Generate one permanent time preset (2)
		ih += generatePresetRow(2, false, null, false);
		// Generate any additional dynamic presets (starting from 3)
		for (i=3; i<currentPresetCount; i++) {
			ih += generatePresetRow(i, false, null, true);
		}
		gId("TMT").innerHTML=ih;
	}

	function generatePresetRow(i, isSunEvent = false, sunType = null, isDynamic = false) {
		var ih = "";
		var hourInput = isSunEvent ? 
			`${sunType}<input name="H${i}" value="255" type="hidden">` : 
			`<input name="H${i}" class="xs" type="number" min="0" max="24">`;
		
		ih += `<tr id="preset-row-${i}"><td><input name="W${i}" id="W${i}" type="hidden"><input id="W${i}0" type="checkbox"></td>
<td>${hourInput}</td>
<td><input name="N${i}" class="xs" type="number" min="${isSunEvent ? '-59' : '0'}" max="59"></td>
<td><input name="T${i}" class="s" type="number" min="0" max="250"></td>
<td><div id="CB${i}" onclick="expand(this,${i})" class="cal">&#128197;</div></td></tr>`;
		
		ih += `<tr id="preset-detail-${i}"><td colspan=5><div id="WD${i}" style="display:none;background-color:#444;"><hr>`;
		
		if (!isSunEvent) {
			ih += "Run on weekdays";
		}
		
		ih += `<table><tr><th>M</th><th>T</th><th>W</th><th>T</th><th>F</th><th>S</th><th>S</th></tr><tr>`;
		for (j=1;j<8;j++) ih += `<td><input id="W${i}${j}" type="checkbox"></td>`;
		ih += "</tr></table>";
		
		if (!isSunEvent) {
			ih += `from <select name="M${i}">`;
			for (j=0;j<12;j++) ih += `<option value="${j+1}">${ms[j]}</option>`;
			ih += `</select><input name="D${i}" class="xs" type="number" min="1" max="31"></input> to <select name="P${i}">`;
			for (j=0;j<12;j++) ih += `<option value="${j+1}">${ms[j]}</option>`;
			ih += `</select><input name="E${i}" class="xs" type="number" min="1" max="31"></input>`;
		}
		
		ih += "<hr></div></td></tr>";
		return ih;
	}

	function addTimePreset() {
		if (currentPresetCount >= maxTimePresets) {
			alert(`Maximum of ${maxTimePresets} time presets allowed.`);
			return;
		}
		
		var table = gId("TMT");
		var newRowHTML = generatePresetRow(currentPresetCount, false, null, true);
		table.insertAdjacentHTML("beforeend", newRowHTML);
		
		currentPresetCount++;
		updateButtonStates();
	}

	function removePreset(index) {
		if (index < 3) {
			alert("Cannot remove built-in presets (Sunrise, Sunset, and first time preset).");
			return;
		}
		
		// Remove the preset rows
		var presetRow = gId(`preset-row-${index}`);
		var detailRow = gId(`preset-detail-${index}`);
		
		if (presetRow) presetRow.remove();
		if (detailRow) detailRow.remove();
		
		// Reindex remaining presets
		reindexPresets();
		currentPresetCount--;
		updateButtonStates();
	}

	function removeLastPreset() {
		if (currentPresetCount <= 3) {
			alert("Cannot remove built-in presets. Only dynamic presets (3+) can be removed.");
			return;
		}
		
		// Find the highest index dynamic preset and remove it
		var lastIndex = currentPresetCount - 1;
		removePreset(lastIndex);
	}

	function reindexPresets() {
		var table = gId("TMT");
		var rows = table.querySelectorAll("tr[id^='preset-row-']");
		var newIndex = 3;
		
		rows.forEach((row) => {
			var oldIndex = row.id.split('-')[2];
			if (parseInt(oldIndex) >= 3) {
				updatePresetRowIndex(row, oldIndex, newIndex);
				var detailRow = gId(`preset-detail-${oldIndex}`);
				if (detailRow) {
					updatePresetDetailRowIndex(detailRow, oldIndex, newIndex);
				}
				newIndex++;
			}
		});
	}

	function updatePresetRowIndex(row, oldIndex, newIndex) {
		row.id = `preset-row-${newIndex}`;
		row.innerHTML = row.innerHTML
			.replace(new RegExp(`name="W${oldIndex}"`, 'g'), `name="W${newIndex}"`)
			.replace(new RegExp(`id="W${oldIndex}`, 'g'), `id="W${newIndex}`)
			.replace(new RegExp(`name="H${oldIndex}"`, 'g'), `name="H${newIndex}"`)
			.replace(new RegExp(`name="N${oldIndex}"`, 'g'), `name="N${newIndex}"`)
			.replace(new RegExp(`name="T${oldIndex}"`, 'g'), `name="T${newIndex}"`)
			.replace(new RegExp(`id="CB${oldIndex}"`, 'g'), `id="CB${newIndex}"`)
			.replace(new RegExp(`expand\(this,${oldIndex}\)`, 'g'), `expand(this,${newIndex})`)
			.replace(new RegExp(`removePreset\(${oldIndex}\)`, 'g'), `removePreset(${newIndex})`);
	}

	function updatePresetDetailRowIndex(row, oldIndex, newIndex) {
		row.id = `preset-detail-${newIndex}`;
		row.innerHTML = row.innerHTML
			.replace(new RegExp(`id="WD${oldIndex}"`, 'g'), `id="WD${newIndex}"`)
			.replace(new RegExp(`id="W${oldIndex}`, 'g'), `id="W${newIndex}`)
			.replace(new RegExp(`name="M${oldIndex}"`, 'g'), `name="M${newIndex}"`)
			.replace(new RegExp(`name="D${oldIndex}"`, 'g'), `name="D${newIndex}"`)
			.replace(new RegExp(`name="P${oldIndex}"`, 'g'), `name="P${newIndex}"`)
			.replace(new RegExp(`name="E${oldIndex}"`, 'g'), `name="E${newIndex}"`);
	}

	function updateButtonStates() {
		var addBtn = gId("addPresetBtn");
		var removeBtn = gId("removePresetBtn");
		
		if (addBtn) {
			addBtn.disabled = currentPresetCount >= maxTimePresets;
		}
		
		if (removeBtn) {
			removeBtn.disabled = currentPresetCount <= 3;
		}
	}
	function FC()
	{
		for(i=0;i<currentPresetCount;i++)
		{
			let wd = gId("W"+i);
			if (!wd) continue; // Skip if preset doesn't exist
			wd = wd.value;
			for(j=0;j<8;j++) {
				let checkbox = gId("W"+i+j);
				if (checkbox) checkbox.checked=wd>>j&1;
			}
			if ((wd&254) != 254 || (i<8 && (gN("M"+i) && gN("D"+i) && gN("P"+i) && gN("E"+i) && 
				(gN("M"+i).value != 1 || gN("D"+i).value != 1 || gN("P"+i).value != 12 || gN("E"+i).value != 31)))) {
				let cbElement = gId("CB"+i);
				if (cbElement) expand(cbElement,i); //expand macros with custom DOW or date range set
			}
		}
		updateAddButtonState();
	}
	function Wd()
	{
		a = [];
		for (i=0; i<currentPresetCount; i++) {
			a[i] = 0;
			m=1;
			for (j=0; j<8; j++) {
				let checkbox = gId("W"+i+j);
				if (checkbox && checkbox.checked) a[i]+=m;
				m*=2;
			}
			let hiddenInput = gId("W"+i);
			if (hiddenInput) hiddenInput.value = a[i];
		}
		if (d.Sf.LTR.value==="S") { d.Sf.LT.value = -1*parseFloat(d.Sf.LT.value); }
		if (d.Sf.LNR.value==="W") { d.Sf.LN.value = -1*parseFloat(d.Sf.LN.value); }
	}
	function addRow(i,p,l,d) {
		var t = gId("macros");	// table
		var rCnt = t.rows.length;   // get the number of rows.
		var tr = t.insertRow(rCnt); // table row.
		var b = String.fromCharCode((i<10?48:55)+i);
		var td = document.createElement('td');          // TABLE DEFINITION.
		td = tr.insertCell(0);
		td.innerHTML = `Button ${i}:`;
		td = tr.insertCell(1);
		td.innerHTML = `<input name="MP${b}" type="number" class="s" min="0" max="250" value="${p}" required>`;
		td = tr.insertCell(2);
		td.innerHTML = `<input name="ML${b}" type="number" class="s" min="0" max="250" value="${l}" required>`;
		td = tr.insertCell(3);
		td.innerHTML = `<input name="MD${b}" type="number" class="s" min="0" max="250" value="${d}" required>`;
	}
	function getLatLon() {
		if (!el) {
			window.addEventListener("message", (event) => {
				if (event.origin !== "https://locate.wled.me") return;
				if (event.data instanceof Object) {
					d.Sf.LT.value = event.data.lat;
					d.Sf.LN.value = event.data.lon;
					updLatLon();
				}
			}, false);
			el = true;
		}
		window.open("https://locate.wled.me","_blank");
	}
	function updLatLon(i) {
		if (parseFloat(d.Sf.LT.value)<0) { d.Sf.LTR.value = "S"; d.Sf.LT.value = -1*parseFloat(d.Sf.LT.value); } else d.Sf.LTR.value = "N";
		if (parseFloat(d.Sf.LN.value)<0) { d.Sf.LNR.value = "W"; d.Sf.LN.value = -1*parseFloat(d.Sf.LN.value); } else d.Sf.LNR.value = "E";
	}
	</script>
	<style>@import url("style.css");</style>
</head>
<body onload="S()">
	<form id="form_s" name="Sf" method="post" onsubmit="Wd()">
		<div class="toprow">
		<div class="helpB"><button type="button" onclick="H('features/settings/#time-settings')">?</button></div>
		<button type="button" onclick="B()">Back</button><button type="submit">Save</button><hr>
		</div>
		<h2>Time setup</h2>
		Get time from NTP server: <input type="checkbox" name="NT"><br>
		<input type="text" name="NS" maxlength="32"><br>
		Use 24h format: <input type="checkbox" name="CF"><br>
		Time zone: 
		<select name="TZ">
			<option value="0" selected>GMT(UTC)</option>
			<option value="1">GMT/BST</option>
			<option value="2">CET/CEST</option>
			<option value="3">EET/EEST</option>
			<option value="4">US-EST/EDT</option>
			<option value="5">US-CST/CDT</option>
			<option value="6">US-MST/MDT</option>
			<option value="7">US-AZ</option>
			<option value="8">US-PST/PDT</option>
			<option value="9">CST (AWST, PHST)</option>
			<option value="10">JST (KST)</option>
			<option value="11">AEST/AEDT</option>
			<option value="12">NZST/NZDT</option>
			<option value="13">North Korea</option>
			<option value="14">IST (India)</option>
			<option value="15">CA-Saskatchewan</option>
			<option value="16">ACST</option>
			<option value="17">ACST/ACDT</option>
			<option value="18">HST (Hawaii)</option>
			<option value="19">NOVT (Novosibirsk)</option>
			<option value="20">AKST/AKDT (Anchorage)</option>
			<option value="21">MX-CST</option>
			<option value="22">PKT (Pakistan)</option>
			<option value="23">BRT (Brasília)</option>
		</select><br>
		UTC offset: <input name="UO" type="number" min="-65500" max="65500" required> seconds (max. 18 hours)<br>
		Current local time is <span class="times">unknown</span>.<br>
		Latitude: <select name="LTR"><option value="N">N</option><option value="S">S</option></select><input name="LT" type="number" class="xl" min="0" max="66.6" step="0.01"><br>
		Longitude: <select name="LNR"><option value="E">E</option><option value="W">W</option></select><input name="LN" type="number" class="xl" min="0" max="180" step="0.01"><br>
		<button type="button" id="locbtn" onclick="getLatLon()">Get location</button>
		<div><i>(opens new tab, only works in browser)</i></div>
		<div id="sun" class="times"></div>
		<h3>Clock</h3>
		Analog Clock overlay: <input type="checkbox" name="OL" onchange="Cs()"><br>
		<div id="cac">
			First LED: <input name="O1" type="number" min="0" max="1024" required> Last LED: <input name="O2" type="number" min="0" max="1024" required><br>
			12h LED: <input name="OM" type="number" min="0" max="1024" required><br>
			Show 5min marks: <input type="checkbox" name="O5"><br>
			Seconds (as trail): <input type="checkbox" name="OS"><br>
			Show clock overlay only if all LEDs are solid black: <input type="checkbox" name="OB"><br>
		</div>
		Countdown Mode: <input type="checkbox" name="CE"><br>
		Countdown Goal:<br>
		Date:&nbsp;<nowrap>20<input name="CY" class="xs" type="number" min="0" max="99" required>-<input name="CI" class="xs" type="number" min="1" max="12" required>-<input name="CD" class="xs" type="number" min="1" max="31" required></nowrap><br>
		Time:&nbsp;<nowrap><input name="CH" class="xs" type="number" min="0" max="23" required>:<input name="CM" class="xs" type="number" min="0" max="59" required>:<input name="CS" class="xs" type="number" min="0" max="59" required></nowrap><br>
		<h3>Upload Schedule JSON</h3>
		<input type="file" name="scheduleFile" id="scheduleFile" accept=".json">
		<input type="button" value="Upload" onclick="uploadFile(d.Sf.scheduleFile, '/schedule.json');">
		<br>
		<a class="btn lnk" id="bckschedule" href="/schedule.json" download="schedule">Backup schedule</a><br>
		<h3>Macro presets</h3>
		<b>Macros have moved!</b><br>
		<i>Presets now also can be used as macros to save both JSON and HTTP API commands.<br>
		Just enter the preset ID below!</i>
		<i>Use 0 for the default action instead of a preset</i><br>
		Alexa On/Off Preset: <input name="A0" class="m" type="number" min="0" max="250" required> <input name="A1" class="m" type="number" min="0" max="250" required><br>
		Countdown-Over Preset: <input name="MC" class="m" type="number" min="0" max="250" required><br>
		Timed-Light-Over Presets: <input name="MN" class="m" type="number" min="0" max="250" required><br>
		<h3>Button actions</h3>
		<table style="margin: 0 auto;" id="macros">
			<thead>
				<tr>
					<td>push<br>switch</td>
					<td>short<br>on-&gt;off</td>
					<td>long<br>off-&gt;on</td>
					<td>double<br>N/A</td>
				</tr>
			</thead>
			<tbody>
			</tbody>
		</table>
		<a href="https://kno.wled.ge/features/macros/#analog-button" target="_blank">Analog Button setup</a>
		<h3>Time-controlled presets</h3>
		<div style="display: inline-block">
		<table id="TMT" style="min-width:380px; margin: 0 auto;"></table>
		<br>
		<button type="button" id="addPresetBtn" onclick="addTimePreset()">+</button>
		<button type="button" id="removePresetBtn" onclick="removeLastPreset()" style="margin-left: 5px;">-</button>
		</div>
		<hr>
		<button type="button" onclick="B()">Back</button><button type="submit">Save</button>
	</form>
</body>
</html>
